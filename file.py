import os
import hashlib
from ecdsa import SigningKey, SECP256k1
import base58

# –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ SHA-256
def file_to_sha256(file_path):
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            sha256_hash.update(chunk)
    return sha256_hash.digest()

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ WIF
def private_key_to_wif(private_key_bytes, compressed=True):
    payload = b'\x80' + private_key_bytes
    if compressed:
        payload += b'\x01'
    checksum = hashlib.sha256(hashlib.sha256(payload).digest()).digest()[:4]
    return base58.b58encode(payload + checksum).decode('utf-8')

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ
def get_public_key(private_key_bytes):
    sk = SigningKey.from_string(private_key_bytes, curve=SECP256k1)
    vk = sk.verifying_key
    return vk.to_string("compressed")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Bitcoin-–∞–¥—Ä–µ—Å–∞
def public_key_to_address(public_key_bytes):
    sha256_hash = hashlib.sha256(public_key_bytes).digest()
    ripemd160 = hashlib.new('ripemd160')
    ripemd160.update(sha256_hash)
    public_key_hash = ripemd160.digest()
    payload = b'\x00' + public_key_hash  # –ü—Ä–µ—Ñ–∏–∫—Å mainnet
    checksum = hashlib.sha256(hashlib.sha256(payload).digest()).digest()[:4]
    address = base58.b58encode(payload + checksum).decode('utf-8')
    return address

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª
def save_to_file(data):
    with open("bitcoin_wallets.txt", "a", encoding="utf-8") as f:
        f.write(f"üîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (HEX): {data['private_key_hex']}\n")
        f.write(f"üîë –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (WIF): {data['wif']}\n")
        f.write(f"üßæ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: {data['public_key']}\n")
        f.write(f"‚Çø Bitcoin-–∞–¥—Ä–µ—Å: {data['address']}\n")
        f.write("-" * 60 + "\n")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def generate_keys_from_file(file_path):
    private_key_bytes = file_to_sha256(file_path)
    private_key_int = int.from_bytes(private_key_bytes, 'big')

    if not (1 <= private_key_int < SECP256k1.order):
        raise ValueError("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ secp256k1")

    valid_private_key_bytes = private_key_int.to_bytes(32, 'big')

    wif_key = private_key_to_wif(valid_private_key_bytes)
    public_key = get_public_key(valid_private_key_bytes)
    bitcoin_address = public_key_to_address(public_key)

    return {
        'private_key_hex': valid_private_key_bytes.hex(),
        'wif': wif_key,
        'public_key': public_key.hex(),
        'address': bitcoin_address
    }

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ CODE
def generate_keys_from_folder(folder_name="CODE"):
    script_dir = os.path.dirname(os.path.abspath(__file__))
    folder_path = os.path.join(script_dir, folder_name)

    if not os.path.exists(folder_path):
        print(f"‚ùå –ü–∞–ø–∫–∞ '{folder_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {folder_path}")
        return

    files = [f for f in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, f))]
    if not files:
        print(f"‚ùå –í –ø–∞–ø–∫–µ '{folder_name}' –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return

    for filename in files:
        file_path = os.path.join(folder_path, filename)
        print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {filename}")
        try:
            keys = generate_keys_from_file(file_path)
            print("üîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (HEX):", keys['private_key_hex'])
            print("üîë –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (WIF):", keys['wif'])
            print("üßæ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:", keys['public_key'])
            print("‚Çø Bitcoin-–∞–¥—Ä–µ—Å:", keys['address'])
            save_to_file(keys)
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ bitcoin_wallets.txt")
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞:", str(e))

if __name__ == "__main__":
    mode = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:\n1 - –û–¥–∏–Ω —Ñ–∞–π–ª\n2 - –í—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ CODE\n–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2: ").strip()

    if mode == '1':
        file_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: ")
        try:
            keys = generate_keys_from_file(file_path)
            print("\nüîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (HEX):", keys['private_key_hex'])
            print("\nüîë –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (WIF):", keys['wif'])
            print("\nüßæ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:", keys['public_key'])
            print("\n‚Çø Bitcoin-–∞–¥—Ä–µ—Å:", keys['address'])
            save_to_file(keys)
            print("\n‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ bitcoin_wallets.txt")
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞:", str(e))

    elif mode == '2':
        generate_keys_from_folder()

    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")
